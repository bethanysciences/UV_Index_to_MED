
/*
 * --------------------------------------------------------------------------------------------------------
 * 
 * Almanac for specific Latitude and Longitudes
 * Operates independantly not needing an Internet connection
 * 
 * Bob Smith https://github.com/bethanysciences/almanac
 *  
 * Written and compiled under version 1.8.12+ of the Arduino IDE using the 
 * AVRISP mkII programmer for Arduino for Nano 33 IoT and Arduino Nano 33 
 * BLE based microprocessors
 * 
 * This program distributed WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTIBILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  
 * Predictions generated by this program should NOT be used for navigation.
 * No accuracy or warranty is given or implied for these predictions.
 * 
 * 
 * 
 * * * * * * KEY FUNCTIONS USED * * * * 
 * --------------------------------------------------------------------------------------------------------

 * 
 * * * * * * HARDWARE USED * * * * 
 * --------------------------------------------------------------------------------------------------------
 * 
 * Microprocessors written for (others may work)
 * nRF52840
 * Arduino Nano 33 BLE Sense https://store.arduino.cc/usa/nano-33-ble-sense
 * Arduino Nano 33 BLE https://store.arduino.cc/usa/nano-33-ble
 * Interrupt Pins All
 * 
 * OLED Display
 * MakerHawk 1.5" 128x128 Pixels SSD1327 Driver I2C based OLED Display
 * https://www.amazon.com/s?k=MakerHawk&ref=bl_dp_s_web_18510440011 using Olikraus's 
 * https://github.com/olikraus/u8g2 library - installed from Arduino IDE as [oled_0]
 * setI2CAddress(0x7A) (0x78)
 * 
 * 
 * 
 *  * * * * * * MICE TYPE * * * * 
 * --------------------------------------------------------------------------------------------------------
 * 
 * This application and project are open source using MIT License see license.txt
 * See included library github directories for their respecive licenses
 *  
 * --------------------------------------------------------------------------------------------------------
 */

#define     DEBUG true                                         // true setup and use serial print


// -------- SENSORS
#include <Arduino_LPS22HB.h>
#include <Arduino_HTS221.h>
#include "Adafruit_VEML6075.h"
Adafruit_VEML6075 uv = Adafruit_VEML6075();


// -------- USER INPUTS
int     fitzpatrickScore        = 13;                           // Fitzpatrick Skin Score       0-32
int     sunProtectFactor        = 30;                           // SPF Applied                  0-100
int     onWater                 = 0;                            // On Water                     bool
int     onSnow                  = 0;                            // Snow Present                 bool
double  altitudeM               = 3;                            // Altitude (meters)            0-11000


// -------- SENSOR INPUTS, OUTPUTS, FUNCTIONS
double  uvIndex;                                                // UV Index                     0.00-26.00
double  uvBReading;                                             // UV B reading

double  temperatureC;                                           // Temperature (째 Celsius)
double  temperatureF;                                           // Temperature (째 Fahrenheit)
double  humidity;                                               // Relative humididty (%)       0-100%
double  dewpointF;                                              // Dewpoint (째 Fahrenheit)
double  heatIndexF;                                             // Heat Index (째 Fahrenheit)

double  barameterKPA;                                           // Barometer (kPa)              0-1086
double  barameterHG;                                            // Barometer (in. mercury)

int     minutes2MED;                                            // Minutes to Minimal Erythemal Dose (MED)

double celsuisFahrenheit(double celsius) {                      // convert Celcius to Fahrenheit
    return ((celsius * 9) / 5) + 32; 
}
double pascalsHG(float pascals) {                               // convert Pascals to in. mercury
    return (pascals * 0.000295333727); 
}
double getDewpoint(double cel, int hum) {                       // calc dew point
    double Td = (237.7 * ((17.271 * cel) / 
                (237.7 + cel) + 
                log(hum * 0.01))) / 
                (17.271 - ((17.271 * cel) / 
                (237.7 + cel) + 
                log(hum * 0.01)));
    return celsuisFahrenheit(Td);
}
double getHeatIndex(double tempF, double humd_l) {              // calc Heat Index
    if (tempF < 80 || humd_l < 40) {
        double pass = tempF; 
        return pass;
    }
    double c1=-42.38, c2=2.049;
    double c3=10.14, c4=-0.2248;
    double c5=-6.838e-3, c6=-5.482e-2;
    double c7=1.228e-3, c8=8.528e-4;
    double c9=-1.99e-6;
    double t = tempF;
    double r = humd_l;
    double a = ((c5 * t) + c2) * t + c1;
    double b = ((c7 * t) + c4) * t + c3;
    double c = ((c9 * t) + c8) * t + c6;
    double rv = (c * r + b) * r + a;
    return rv;
}
char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  // convert floats to fixed string
  // val      Your float variable;
  // width    Length of the string that will be created INCLUDING decimal point;
  // prec     Number of digits after the deimal point to print;
  // sout     Destination of output buffer
    char fmt[20];
    sprintf(fmt, "%%%d.%df", width, prec);
    sprintf(sout, fmt, val);
    return sout;
}

double med() {                                                  // mins to Minimal Erythemal Dose (MED)
    double uvi_f = (uvIndex * (altitudeM * 1.2)) +              // alt factor (1.2 x meters above sea level)
                   (uvIndex * (onWater * 1.5)) +                // on water UVindex factor (1.5x)
                   (uvIndex * (onSnow * 1.85));                 // on snow UVindex factor (1.85x)
    double s2med_b = (-3.209E-5 * pow(fitzpatrickScore, 5)) +   // Fitzpatrick score @ 1 UV idx secs to MED
                     (2.959E-3 * pow(fitzpatrickScore, 4)) -    // 5th order polynomial plot
                     (0.103 * pow(fitzpatrickScore, 3)) +
                     (1.664* pow(fitzpatrickScore, 2)) +
                     (3.82 * fitzpatrickScore) + 
                     34.755;
    double s2med = ((s2med_b / uvi_f) * sunProtectFactor);      // combine factors
    double m2med = s2med / 60;                                  // convert secs to mins
    if (m2med > 480) m2med = 480;                               // max at 6 hours
    return m2med;
}


#include <U8g2lib.h>
U8G2_SSD1327_MIDAS_128X128_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);
#define     CHAR_W                  6                           // display size 1 character width
#define     CHAR_H                  8                           // display size 1 character height
#define     LINE_HEIGHT             14
#define     MARGIN_W                3
#define     COLUMN_2                70

#define     TITLE_LINE              14
#define     MIN2MED_LINE            28
#define     UVI_LINE                42
#define     UVB_LINE                56
#define     HEATINDEX_LINE          70
#define     DEWPOINT_LINE           84
#define     TEMPERATURE_LINE        98
#define     HUMIDITY_LINE           112
#define     BAROMETER_LINE          126
#define     SPRITE0_X               123
#define     SPRITE0_Y               123
#define     SPRITE1_X               123
#define     SPRITE1_Y               0


void setup() {
    asm(".global _printf_float");                               // printf renders floats

#if DEBUG
    Serial.begin(115200);
    while (!Serial);                                            // wait for serial port to open
    Serial.println("\n\n ------------------- setup() ");
#endif

    ssd1351OLEDSetup();
    delay(100);    

    veml6075Setup();
    delay(100);

    BARO.begin();
    delay(100);

    HTS.begin();

#if DEBUG
    Serial.println("end setup");
#endif

    delay(1000);
}


void ssd1351OLEDSetup() {
    Serial.println(" ------------------- ssd1351OLEDSetup()");
    
    u8g2.setI2CAddress(0x7a);
    u8g2.begin();
    u8g2.clearBuffer();
    u8g2.enableUTF8Print();
    u8g2.setFontMode(0);
    u8g2.setFont(u8g2_font_9x18_tf);                            // [t]ransparent [f]ull 256bit set

    char title[] = "WX Readings";
    u8g2.setCursor((u8g2.getDisplayWidth() - u8g2.getStrWidth(title))/2, TITLE_LINE);
    u8g2.print(title);

    u8g2.drawUTF8(MARGIN_W, MIN2MED_LINE,       "MED in");
    u8g2.drawUTF8(MARGIN_W, UVI_LINE,           "UVIndx");
    u8g2.drawUTF8(MARGIN_W, UVB_LINE,           "UVb");
    u8g2.drawUTF8(MARGIN_W, HEATINDEX_LINE,     "HtIdx");
    u8g2.drawUTF8(MARGIN_W, DEWPOINT_LINE,      "Dewpt");
    u8g2.drawUTF8(MARGIN_W, TEMPERATURE_LINE,   "Temp");
    u8g2.drawUTF8(MARGIN_W, HUMIDITY_LINE,      "Humid");
    u8g2.drawUTF8(MARGIN_W, BAROMETER_LINE,     "Baro");
    
    u8g2.sendBuffer();
}


void veml6075Setup() {

    Serial.println(" ------------------- veml6075Setup()");
    
    if (! uv.begin()) {
#if DEBUG
        Serial.println("VEML6075 sensor fail");
#endif
    }
    
    uv.setIntegrationTime(VEML6075_100MS);
    uv.setHighDynamic(true);
    uv.setForcedMode(false);                                    // Set the mode
    uv.setCoefficients( 2.22, 1.33,                             // UVA_A and UVA_B coefficients
                        2.95, 1.74,                             // UVB_C and UVB_D coefficients
                        0.001461, 0.002591);                    // UVA and UVB responses

#if DEBUG
    Serial.println("VEML6075 sensor connect");
    Serial.print("Integration time set to: ");
    switch (uv.getIntegrationTime()) {
        case VEML6075_50MS:  Serial.print("50");  break;
        case VEML6075_100MS: Serial.print("100"); break;
        case VEML6075_200MS: Serial.print("200"); break;
        case VEML6075_400MS: Serial.print("400"); break;
        case VEML6075_800MS: Serial.print("800"); break;
    }
    Serial.println("ms");

    delay(500);
    
    if (uv.getHighDynamic()) Serial.println("Dynamic reading mode: High");
    else Serial.println("Dynamic reading mode: Normal");
    if (uv.getForcedMode()) Serial.println("Reading mode: Forced");
    else Serial.println("Reading mode: Continuous");
    Serial.println("VEML6075 rest readings");

    delay(500);
    Serial.print("Raw UVA reading:  "); Serial.println(uv.readUVA());
    Serial.print("Raw UVB reading:  "); Serial.println(uv.readUVB());
    Serial.print("UV Index reading: "); Serial.println(uv.readUVI());
#endif
}


void loop() {
    Serial.println(" ------------------- loop()");

    getReadings();

    Serial.println("delay(2000)");

    delay(5000);

}


void getReadings() {
    Serial.println(" ------------------- getReadings()");

    Serial.println("uv.readUVI()");
    uvIndex         = uv.readUVI();                             // VEML6075 UV Index
    delay(50);

    Serial.println("uv.readUVB()");
    uvBReading      = uv.readUVB();                             // VEML6075 UVB reading
    delay(50);
    
    Serial.println("HTS.readTemperature(FAHRENHEIT)");
    temperatureF    = HTS.readTemperature(FAHRENHEIT);          // HTS221 temperature 째Fahrenheit)
    delay(50);
    
    Serial.println("HTS.readTemperature()");
    temperatureC    = HTS.readTemperature();                    // HTS221 temperature 째Celcius)
    delay(50);
        
    Serial.println("HTS.readHumidity()");
    humidity        = HTS.readHumidity();                       // HTS221 relative humididty (%)
    delay(50);
    
    Serial.println("BARO.readPressure()");
    barameterKPA    = BARO.readPressure();                      // LPS22HB barometric pressure (kilo-Pascals) 
    delay(50);
    
    Serial.println("getDewpoint()");
    dewpointF       = getDewpoint(temperatureC, humidity);      // calc Dew Point
    delay(50);

    Serial.println("getHeatIndex()");
    heatIndexF      = getHeatIndex(temperatureF, humidity);     // calc Heat Index
    delay(50);

    Serial.println("med()");
    minutes2MED     = med();                                    // mins to Minimal Erythemal Dose (MED)
    delay(50);
    
    char mmed[40];
    char uvix[40] = "";
    char uvbr[40] = "";
    char baro[40] = "";
    char temp[40] = "";
    char humd[40] = "";
    char htix[40] = "";
    char dwpt[40] = "";

    Serial.println("sprintfs");
    sprintf(mmed, "%d min",  (int)minutes2MED);
    sprintf(uvix, "%d.%02d", (int)uvIndex,      (int)(uvIndex*100)%100);
    sprintf(uvbr, "%d.%02d", (int)uvBReading,   (int)(uvBReading*100)%100);
    sprintf(htix, "%d째F",    (int)heatIndexF);
    sprintf(dwpt, "%d째F",    (int)dewpointF);
    sprintf(temp, "%d째F",    (int)temperatureF);
    sprintf(humd, "%d%%",    (int)humidity);
    sprintf(baro, "%dpa",    (int)barameterKPA);

    Serial.println("u8g2.drawUTF8");

    u8g2.drawUTF8(COLUMN_2 - 7, MIN2MED_LINE, mmed); u8g2.sendBuffer();

    u8g2.drawUTF8(COLUMN_2, UVI_LINE, uvix);
    u8g2.drawBox(SPRITE0_X, UVI_LINE - 4, 4, 4); delay(50); u8g2.sendBuffer();

    u8g2.drawUTF8(COLUMN_2, UVB_LINE, uvbr);
    u8g2.drawBox(SPRITE0_X, UVB_LINE - 4, 4, 4); delay(50); u8g2.sendBuffer();

    u8g2.drawUTF8(COLUMN_2, HEATINDEX_LINE, htix);
    u8g2.drawBox(SPRITE0_X, HEATINDEX_LINE - 4, 4, 4); delay(50); u8g2.sendBuffer();

    u8g2.drawUTF8(COLUMN_2, DEWPOINT_LINE, dwpt);
    u8g2.drawBox(SPRITE0_X, DEWPOINT_LINE - 4, 4, 4); delay(50); u8g2.sendBuffer();

    u8g2.drawUTF8(COLUMN_2, TEMPERATURE_LINE, temp);
    u8g2.drawBox(SPRITE0_X, TEMPERATURE_LINE -4, 4, 4); delay(50); u8g2.sendBuffer();

    u8g2.drawUTF8(COLUMN_2, HUMIDITY_LINE, humd);
    u8g2.drawBox(SPRITE0_X, HUMIDITY_LINE -4, 4, 4); delay(50); u8g2.sendBuffer();

    u8g2.drawUTF8(COLUMN_2, BAROMETER_LINE, baro);
    u8g2.drawBox(SPRITE0_X, BAROMETER_LINE -4, 4, 4); delay(50); u8g2.sendBuffer();

    u8g2.setDrawColor(0); u8g2.drawBox(SPRITE0_X, UVI_LINE -4, 4, BAROMETER_LINE - 4);
    delay(50); u8g2.sendBuffer();
    u8g2.setDrawColor(1);

#if DEBUG
    Serial.print("MED          ");   Serial.println(minutes2MED);
    Serial.print("UV Index     ");   Serial.println(uv.readUVI());
    Serial.print("UV B Reading ");   Serial.println(uv.readUVB());
    Serial.print("Heat Index   ");   Serial.println(htix);
    Serial.print("Dewpoint     ");   Serial.println(dwpt);
    Serial.print("Temperature  ");   Serial.println(temp);
    Serial.print("Humdity      ");   Serial.println(humd);
    Serial.print("Pressure     ");   Serial.println(baro);
#endif

}
